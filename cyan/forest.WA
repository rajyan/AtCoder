#include <bits/stdc++.h>
using namespace std;
 
int main()
{
	string S;
	cin >> S;

	int N = S.size();
	string pre, post;
	for( int i = 0; i < N; i++ ) {
		if( S[i] != '_' ) break;
		pre += S[i];
	}
	S = S.substr( pre.size() );
	if( S.size() == 0 ) {
		cout << pre << endl;
		return 0;
	}
	N = S.size();
	for( int i = N - 1; i >= 0; i-- ) {
		if( S[i] != '_' ) break;
		post += S[i];
	}
	S = S.substr( 0, N - post.size() );
	N = S.size();
	string ans;
	string::size_type pos = S.find( '_' );
	if( pos != string::npos ) {
		int flag = 0;
		int s = 0;
		while( 1 ) {
			string::size_type pos = S.find( '_', s );
			if( pos == string::npos ) break;
			s = pos + 1;
			if( isalpha( S[s] ) == false || islower( S[s] ) == false ) {
				flag = 1;
				break;
			}
		}
		if( flag ) {
			cout << pre << S << post << endl;
			return 0;
		}
		s = 0;
		int notfirst = 0;
		while( 1 ) {
			string::size_type pos = S.find( '_', s );
			if( pos == string::npos ) {
				string t = S.substr( s );
				t[0] = toupper( t[0] );
				ans += t;
				break;
			}
			string t = S.substr( s, pos - s );
			if( notfirst ) t[0] = toupper( t[0] );
			else notfirst = 1;
			ans += t;
			s = pos + 1;
		}
	}
	else {
		int notfirst = 0;
		for( int i = 0; i < N; i++ ) {
			if( notfirst && isupper( S[i] ) ) {
				ans += '_';
				ans += tolower( S[i] );
			}
			else {
				ans += S[i];
				if( islower( S[i] ) ) notfirst = 1;
			}
		}
	}

	cout << pre << ans << post << endl;
}

